3.1 mysql에서 데이터를 불러오기
간단한 데이터를 불러올 경우: pymysql. 쿼리 execute()fetch(one, many, all)
표 데이터를 불러올 경우: pymysql. pd.read_sql(sql, db)
3.2 mysql로 데이터 보내기/수정하기
INSERT/UPDATE/DELETE DML 쿼리를 실행할 때: pymysql. 쿼리 execute()commit()
표 데이터를 DB 테이블에 INSERT할 때: sqlalchemy. df.to_sql("table_name", con=engine)
3.3 pymysql 사용법
1. pymysql 모듈 import 
2.MySQL db 연결: pymysql.connect()메서드로 Connection 객체 생성
3.Connection 객체로부터 cursor()메서드로 Cursor 객체 생성
4.Cursor 객체의 execute()메서드로 sql 쿼리를 mysql db에 전송
5.SELECT 쿼리의 경우 fetchall(), fetchone(), fetchmany()메서드를 사용하여 데이터를 가져옴
pd.read_sql()을 사용하면 데이터를 바로 DataFrame으로 불러올 수 있음
6.INSERT/UPDATE/DELETE DML(Data Manipulation Language) 쿼리의 경우Connection 개체의 commit()메서드를 사용하여 데이터 확정
7.종료: Connection 객체의 close()메서드를 사용해 db 연결을 종료
3.4 sqlalchemy 사용법
1.sqlalchemy create_engine(sql db 연결 라이브러리)을 import
2.MySQL db 연결: create_engine()메서드로 engine 객체 생성. connect()메서드로 db 연결
3.DataFrame → MySQL 내보내기: df.to_sql()메서드 사용
4.종료: close()메서드로 db 연결 종료
